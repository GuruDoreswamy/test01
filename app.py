# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gvAGueEg4U2VPnH36Z5qNnVeLoxS4MN2
"""



import pandas as pd
import gradio as gr
import seaborn as sns
import matplotlib.pyplot as plt
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from textblob import TextBlob

# Function to perform sentiment analysis and generate plots
def analyze_and_plot(csv_file, model_name):
    try:
        # Initialize the sentiment analyzer based on the selected model
        if model_name == "VADER":
            analyzer = SentimentIntensityAnalyzer()
            analyze_func = lambda x: analyzer.polarity_scores(x)['compound']
        elif model_name == "TextBlob":
            analyze_func = lambda x: TextBlob(x).sentiment.polarity
        else:
            return "Error: Unsupported model selected."

        # Read the uploaded CSV file
        df = pd.read_csv(csv_file.name)

        # Ensure that 'cleaned_comments' column exists
        if 'cleaned_comments' not in df.columns:
            return "Error: CSV must contain a 'cleaned_comment' column."

        # Perform sentiment analysis
        df['compound'] = df['cleaned_comments'].apply(analyze_func)
        df['sentiment_category'] = df['compound'].apply(
            lambda score: 'Positive' if score > 0.05 else ('Negative' if score < -0.05 else 'Neutral')
        )

        # Create the figure for the plots
        fig, axs = plt.subplots(2, 1, figsize=(12, 12))

        # Plot 1: Distribution of Sentiment Categories
        sns.countplot(x='sentiment_category', data=df, palette='coolwarm', ax=axs[0])
        axs[0].set_title(f'Distribution of Sentiment Categories ({model_name})')
        axs[0].set_xlabel('Sentiment Category')
        axs[0].set_ylabel('Count')

        # Plot 2: Distribution of Compound Sentiment Scores
        sns.histplot(df['compound'], bins=20, kde=True, color='purple', ax=axs[1])
        axs[1].set_title(f'Distribution of Compound Sentiment Scores ({model_name})')
        axs[1].set_xlabel('Compound Score')
        axs[1].set_ylabel('Frequency')

        plt.tight_layout()

        # Return the plots as an image
        return fig

    except Exception as e:
        return f"An error occurred: {str(e)}"

# Create the Gradio interface with a sidebar layout using Blocks
with gr.Blocks() as interface:
    # Title at the top
    gr.Markdown("<h1 style='text-align:center;'>YouTube Sentiment Analysis Visualization</h1>")

    with gr.Row():
        with gr.Column(scale=1):  # Sidebar for file upload and model selection
            #gr.Markdown("## Upload the CSV file and Select Model")
            file_input = gr.File(label="Upload Cleaned Comment CSV")
            with gr.Row():  # Buttons in a single row
                vader_button = gr.Button("VADER")
                textblob_button = gr.Button("TextBlob")

            # Vertical line to separate the sidebar and graph area
            gr.Markdown("<div style='width:1px; height:100%; background-color:gray; display:inline-block;'></div>")

        with gr.Column(scale=3):  # Main area for graphs
            plot_output = gr.Plot(label="Sentiment Analysis Results")

    # Define how each button triggers the sentiment analysis
    vader_button.click(fn=lambda file: analyze_and_plot(file, "VADER"), inputs=file_input, outputs=plot_output)
    textblob_button.click(fn=lambda file: analyze_and_plot(file, "TextBlob"), inputs=file_input, outputs=plot_output)

# Launch the interface with sharing enabled
interface.launch(share=True, server_name="0.0.0.0", server_port=7860)